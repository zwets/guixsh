#!/bin/bash
#
#  guixsh - Run a bash shell or command inside a Guix profile
#  Copyright (c)  2016 Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Part of https://github.com/zwets/guixsh

set -e

RC_NAME=".guixshrc"
ROOT_DIR="$HOME"

emit () {
    [ -z "$VERBOSE" ] || echo "$(basename "$0"): $*" >&2 
}

err_exit () {
    echo "ERROR: $(basename "$0"): $*" >&2
    exit 1
}

usage_exit () {
    echo "
  Usage: $(basename "$0") [OPTIONS] [--] [COMMAND]

  Run a shell or COMMAND in a Guix profile.

  OPTIONS
   -d, --dir=DIR        use DIR as profile location (default \$HOME)
   -c, --create         create a new Guix profile underneath DIR
   -e, --env            retain current shell environment
   -m, --manifest=FILE  use FILE to define the profile
   -h, --help           present this help text
   -v, --verbose        emit verbose output to stderr

  This command starts a bash shell with DIR/.guix-profile as its Guix
  profile.  The default for DIR is \$HOME.  If COMMAND is present then
  it is run in the shell, else the shell is interactive.

  The environment for the spawned shell is constructed as follows:
  1. GUIX_PROFILE is set to \$DIR/.guix-profile (default \$HOME/.guix-profile)
  2. \$GUIX_PROFILE/etc/profile is sourced in an empty environment, or in the
     current environment if option --env is given
  3. \$DIR/bin is prepended to PATH if it exists
  4. \$DIR/$RC_NAME is sourced if that file exists.
  5. If \$GUIX_PROFILE/bin has no guix, then guix is aliased to outside guix
  6. \$PS1 is decorated if the spawned shell is interactive.

  The directory \$DIR/.guix-profile must be present, or option --create
  must be specified.  Option --manifest may be used both when creating
  a new profile and when using an existing profile.  It creates a new
  generation populated according to the manifest.  The manifest must
  install at least bash (or this command would be pointless).

  When option --create is present then: no \$DIR/.guix-profile must exist;
  \$DIR is created unless it exists; \$DIR/bin is created unless it exists.
  @TODO:@ The script unguixsh is added to \$DIR/bin.  If no manifest is
  specified, the created profile has bash installed.

  Unless option --env is given, the spawned shell has only HOME and TERM
  set.  The spawned shell has not sourced ~/.bashrc even if interactive.
  If desired this can be done from \$DIR/${RC_NAME}.  A sample ${RCNAME}
  which does this is provided in the guixsh repo.

  Return value is the return value of COMMAND.
" >&2

    exit ${1:-1}
}

# Functions


# Parse command line arguments

unset CREATE MANIFEST VERBOSE
CLEAN_ENV="-c"

while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
    case $1 in
    --dir=*)
        ROOT_DIR="${1#--dir=}"
        ;;
    -d|--dir)
        shift
        ROOT_DIR="$1"
        ;;
    -e|--env)
        unset CLEAN_ENV
        ;;
    -c|--create)
        CREATE=1
        ;;
    --manifest=*)
        MANIFEST="${1#--manifest=}"
        ;;
    -m|--manifest)
        shift
        MANIFEST="$1"
        ;;
    -h|--help)
        usage_exit 0
        ;;
    -v|--verbose)
        VERBOSE=1
        ;;
    --)
        shift
        break
        ;;
    -*)
        usage_exit
        ;;
    esac
    shift
done

# Making paths absolute

ROOT_DIR="$(realpath "$ROOT_DIR")"
TARGET_PROFILE="$ROOT_DIR/.guix-profile"

# Consistency checks and setting up directories

if [ -n "$CREATE" ]; then
    [ ! -e "$TARGET_PROFILE" ] || err_exit "refusing to create: file or directory exists: $TARGET_PROFILE"
    if [ ! -d "$ROOT_DIR" ]; then
        [ ! -e "$ROOT_DIR" ] || err_exit "cannot create directory: file exists: $ROOT_DIR"
        emit "creating directory: $ROOT_DIR"
        mkdir -p "$ROOT_DIR" || err_exit "failed to create directory: $ROOT_DIR"
    fi
    emit "creating directory: $ROOT_DIR/bin"
    mkdir -p "$ROOT_DIR/bin" || err_exit "failed to create directory: $ROOT_DIR/bin"
    emit "@@@ TODO @@@: add unguixsh to $ROOT_DIR/bin"
else # not creating, check for presence of profile
    [ -d "$ROOT_DIR" ] || err_exit "no such directory: $ROOT_DIR"
    [ -e "$TARGET_PROFILE" ] || err_exit "no such file: $TARGET_PROFILE"
fi

emit "operating from GUIX_PROFILE: $GUIX_PROFILE"
emit "target GUIX_PROFILE: $TARGET_PROFILE"

# Install from manifest or, when creating, install just bash

if [ -n "$MANIFEST" ]; then
    [ -f "$MANIFEST" ] || err_exit "no such file: $MANIFEST"
    emit "running guix manifest install in profile: $TARGET_PROFILE"
    guix package -p "$TARGET_PROFILE" -m "$MANIFEST" || 
        err_exit "guix failed to install manifest in profile: $TARGET_PROFILE"
else # no manifest, install bash when creating new
    [ -z "$CREATE" ] || guix package -p "$TARGET_PROFILE" -i bash || 
        err_exit "guix failed to install bash in created profile: $TARGET_PROFILE"
fi

# Prepare for environment setup

TARGET_BASH="$TARGET_PROFILE/bin/bash"
[ -x "$TARGET_BASH" ] || err_exit "no bash found: $TARGET_BASH"

# Create the bash RC-file

TMP_RCFILE="/tmp/$(basename "$0").$$"
{
    [ -z "$HOME" ] || printf 'export HOME="%s"\n' "$HOME"
    [ -z "$TERM" ] || printf 'export TERM="%s"\n' "$TERM"
    printf 'export GUIX_PROFILE="%s"\n' "$TARGET_PROFILE"
    printf '. "%s/etc/profile"\n' "$TARGET_PROFILE"
    [ ! -d "$ROOT_DIR/bin" ]          || printf 'PATH="%s/bin:$PATH"\n' "$ROOT_DIR"
    [ ! -f "$ROOT_DIR/$RC_NAME" ]     || printf '. "%s/%s"\n' "$ROOT_DIR" "$RC_NAME"
    [ -x "$TARGET_PROFILE/bin/guix" ] || printf 'alias guix="%s"\n' "$(type -P guix)"
    printf '# Self destruction in 3..2..1..\n'  # Yes, legal in Linux since the start
    printf '/bin/rm -f "%s" || true\n' "$TMP_RCFILE"
} > "$TMP_RCFILE"

# Determine if shell will be interactive as mechanism to pass environment differs

if [ $# -eq 0 ]; then
    # Interactive bash.  Pass rc-file via argument.
    exec ${CLEAN_ENV:+-c} "$TARGET_BASH" --init-file "$TMP_RCFILE"
else
    # Non-interactive, so we can't pass rc-file via init-file.
    # Nor can we use BASH_ENV because we clean the env, so we source it.
    exec ${CLEAN_ENV:+-c} "$TARGET_BASH" -c ". '$TMP_RCFILE' && $*"
fi

# vim: sts=4:sw=4:et:ai:si
